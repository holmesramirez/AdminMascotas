/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import clases.*;
import controller.ctlPet;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author tec_crhistit
 */
public class frmPet extends javax.swing.JFrame {

    LinkedList<clsPet> listaGatos = new LinkedList<>();

    ctlPet controladorPet;
    
    
    private void graficarReporte(){
        LinkedList<clsReportHealthStatus> reporte = this.controladorPet.reportHealthStatus();
        DefaultPieDataset dataSet = new DefaultPieDataset();
        for (clsReportHealthStatus registro : reporte) {
            dataSet.setValue(registro.getHealthStatus(), registro.getCountHealthStatus());
        }
        JFreeChart chart = ChartFactory.createPieChart("Reporte Estado Salud", dataSet, true, true , true);
        ChartPanel panelGrafica = new ChartPanel(chart);
        panelGrafica.setMouseWheelEnabled(true);
        
        panelReporteEstadoSalud.setLayout(new java.awt.BorderLayout());
        panelReporteEstadoSalud.add(panelGrafica, BorderLayout.CENTER);
        panelReporteEstadoSalud.validate();
        
    }

    private void llenarListaMascotas() {
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsPet cat : listaGatos) {
            String dato = cat.getName() + " - " + cat.getCode() + " - " + cat.getBornYear() + " - ";
            model.add(index, dato);
            index++;
        }
        listMascotas.setModel(model);

    }

    private void llenarListaMascotas(LinkedList<clsCat> lista) {
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (clsCat cat : lista) {
            String dato = cat.getName() + " - " + cat.getCode() + " - " + cat.getBornYear();
            model.add(index, dato);
            index++;
        }
        listMascotas.setModel(model);

    }

    private void limpiarCamposCat() {
        txtCodeCat.setText("");
        txtNameCat.setText("");
        txtColorCat.setText("");
        txtBornYearCat.setText("");
        cbxHealthStatusCat.setSelectedIndex(0);
        cbxBreedCat.setSelectedIndex(0);
    }

    /**
     * Creates new form frmPet
     */
    public frmPet() {
        initComponents();
        lblCatId.setVisible(false);
        lblPetId.setVisible(false);
        txtCatId.setVisible(false);
        txtPetId.setVisible(false);
        this.controladorPet = new ctlPet();
        this.listaGatos = controladorPet.ListarPets("gato");
        llenarListaMascotas();
        
        graficarReporte();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMascotas = new javax.swing.JList<>();
        btnExportar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodeCat = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNameCat = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtBornYearCat = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtColorCat = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbxHealthStatusCat = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbxBreedCat = new javax.swing.JComboBox<>();
        btnCrearCat = new javax.swing.JButton();
        btnBuscarCat = new javax.swing.JButton();
        btnEditarCat = new javax.swing.JButton();
        btnEliminarCat = new javax.swing.JButton();
        lblPetId = new javax.swing.JLabel();
        lblCatId = new javax.swing.JLabel();
        txtPetId = new javax.swing.JTextField();
        txtCatId = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        panelReporteEstadoSalud = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        listMascotas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Mascota 1", "Mascota 2", "Mascota 3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listMascotas);

        btnExportar.setText("Exportar xls");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(btnExportar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnExportar)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Lista Mascotas", jPanel1);

        jLabel2.setText("Code:");

        txtCodeCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodeCatActionPerformed(evt);
            }
        });

        jLabel3.setText("Name:");

        jLabel4.setText("Born year: ");

        jLabel5.setText("Color: ");

        jLabel6.setText("Health Status:");

        cbxHealthStatusCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sano", "Enfermo", "Estable" }));

        jLabel7.setText("Breed:");

        cbxBreedCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Angora", "Esfinge" }));

        btnCrearCat.setText("Crear");
        btnCrearCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearCatActionPerformed(evt);
            }
        });

        btnBuscarCat.setText("Buscar");
        btnBuscarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCatActionPerformed(evt);
            }
        });

        btnEditarCat.setText("Editar");
        btnEditarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCatActionPerformed(evt);
            }
        });

        btnEliminarCat.setText("Eliminar");
        btnEliminarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCatActionPerformed(evt);
            }
        });

        lblPetId.setText("pet id:");

        lblCatId.setText("cat id:");

        txtPetId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPetIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCodeCat)
                            .addComponent(txtNameCat)
                            .addComponent(txtBornYearCat, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtColorCat, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxHealthStatusCat, 0, 206, Short.MAX_VALUE)
                                    .addComponent(cbxBreedCat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtCatId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnCrearCat)
                                .addGap(47, 47, 47)
                                .addComponent(btnBuscarCat)
                                .addGap(36, 36, 36)
                                .addComponent(btnEditarCat)
                                .addGap(42, 42, 42)
                                .addComponent(btnEliminarCat)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblPetId)
                                .addGap(34, 34, 34)
                                .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCatId)
                                .addGap(115, 115, 115)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodeCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtColorCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNameCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cbxHealthStatusCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBornYearCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cbxBreedCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPetId)
                    .addComponent(lblCatId)
                    .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCatId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearCat)
                    .addComponent(btnBuscarCat)
                    .addComponent(btnEditarCat)
                    .addComponent(btnEliminarCat))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Admin Gatos", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Admin Perros", jPanel3);

        javax.swing.GroupLayout panelReporteEstadoSaludLayout = new javax.swing.GroupLayout(panelReporteEstadoSalud);
        panelReporteEstadoSalud.setLayout(panelReporteEstadoSaludLayout);
        panelReporteEstadoSaludLayout.setHorizontalGroup(
            panelReporteEstadoSaludLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        panelReporteEstadoSaludLayout.setVerticalGroup(
            panelReporteEstadoSaludLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Reporte Estado Salud Mascots", panelReporteEstadoSalud);

        jLabel1.setText("Administrador de mascotas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodeCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodeCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodeCatActionPerformed

    private void btnCrearCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearCatActionPerformed
        //JOptionPane.showMessageDialog(this, "Click en el boton crear");

        try {
            String code = txtCodeCat.getText();
            String name = txtNameCat.getText();
            int bornYear = Integer.parseInt(txtBornYearCat.getText());
            String color = txtColorCat.getText();
            String healthStatus = cbxHealthStatusCat.getSelectedItem().toString();
            String breed = cbxBreedCat.getSelectedItem().toString();

            clsCat cat = new clsCat(0, breed, 0, code, name, bornYear, color, healthStatus);

            boolean resultadoCreacion = this.controladorPet.createPet(cat);

            llenarListaMascotas(this.controladorPet.retornarListaGatosAvista());

            if (resultadoCreacion) {
                JOptionPane.showMessageDialog(this, "Gato creado correctamente");
                limpiarCamposCat();
            }

//            if (code.equals("") || name.equals("") || color.equals("")) {
//                JOptionPane.showMessageDialog(this, "Debe llenar todos los campos");
//            } else {
//                clsCat cat = new clsCat(breed, code, name, bornYear, color, healthStatus);
//                listaGatos.add(cat);
//                JOptionPane.showMessageDialog(this, "Gato creado " + cat.getName());
//                llenarListaMascotas();
//                limpiarCamposCat();
//            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Año de nacimiento invalido");
        }


    }//GEN-LAST:event_btnCrearCatActionPerformed

    private void btnBuscarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCatActionPerformed
        String codeSearch = txtCodeCat.getText();
        //boolean found = false;

        clsCat cat = (clsCat) controladorPet.searchPet(codeSearch, "gato");
        if (cat == null) {
            JOptionPane.showMessageDialog(this, "Gato no encontrado");
        } else {
            txtPetId.setText(cat.getPetId() + "");
            txtCatId.setText(cat.getCatId() + "");
            txtNameCat.setText(cat.getName());
            txtColorCat.setText(cat.getColor());
            txtBornYearCat.setText(cat.getBornYear() + "");
            cbxHealthStatusCat.setSelectedItem(cat.getHealthStatus());
            cbxBreedCat.setSelectedItem(cat.getBreed());
            txtPetId.setEditable(false);
            txtCatId.setEditable(false);
        }

        /*       for (clsCat cat : listaGatos) {
            if (cat.getCode().equals(codeSearch)) {
                txtNameCat.setText(cat.getName());
                txtColorCat.setText(cat.getColor());
                txtBornYearCat.setText(cat.getBornYear() + "");
                cbxHealthStatusCat.setSelectedItem(cat.getHealthStatus());
                cbxBreedCat.setSelectedItem(cat.getBreed());
                found = true;
                break;
            }
        }*/

    }//GEN-LAST:event_btnBuscarCatActionPerformed

    private void btnEditarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCatActionPerformed

        try {

            String code = txtCodeCat.getText();
            String name = txtNameCat.getText();
            String color = txtColorCat.getText();
            int bornYear = Integer.parseInt(txtBornYearCat.getText());
            String breed = cbxBreedCat.getSelectedItem().toString();
            String healthStatus = cbxHealthStatusCat.getSelectedItem().toString();
            int idPet = Integer.parseInt(txtPetId.getText());
            int idCat = Integer.parseInt(txtCatId.getText());

            clsCat cat = new clsCat(idCat, breed, idPet, code, name, bornYear, color, healthStatus);

            boolean resultUpdate = controladorPet.editPet(cat);

            if (resultUpdate) {
                JOptionPane.showMessageDialog(this, "Gato editado con exito en Bd");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error editando el gato");
        }
//        String codeSearch = txtCodeCat.getText();
//        boolean found = false;
//
//        for (clsCat cat : listaGatos) {
//            if (cat.getCode().equals(codeSearch)) {
//                String name = txtNameCat.getText();
//                String color = txtColorCat.getText();
//                int bornYear = Integer.parseInt(txtBornYearCat.getText());
//                String breed = cbxBreedCat.getSelectedItem().toString();
//                String healthStatus = cbxHealthStatusCat.getSelectedItem().toString();
//
//                cat.setName(name);
//                cat.setColor(color);
//                cat.setBornYear(bornYear);
//                cat.setBreed(breed);
//                cat.setHealthStatus(healthStatus);
//
//                JOptionPane.showMessageDialog(this, "Gato actualizado");
//                llenarListaMascotas();
//                limpiarCamposCat();
//                found = true;
//                break;
//            }
//        }
//
//        if (!found) {
//            JOptionPane.showMessageDialog(this, "Gato no encontrado");
//        }
    }//GEN-LAST:event_btnEditarCatActionPerformed

    private void btnEliminarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCatActionPerformed
        try {
            int idPet = Integer.parseInt(txtPetId.getText());
            int idCat = Integer.parseInt(txtCatId.getText());
            
            clsCat cat = new clsCat(idCat, "", idPet, "", "", 0, "", "");
            
            boolean resultado = controladorPet.deletePet(cat);
            
            if(resultado){
                JOptionPane.showMessageDialog(this, "Gato Eliminado");
            }else{
                JOptionPane.showMessageDialog(this, "Gato no eliminado");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error conectando a el controlador y la bd");
        }

//        String codeSearch = txtCodeCat.getText();
//        boolean found = false;
//
        int input = JOptionPane.showConfirmDialog(this, "Desea eliminar este gato ?");
//
//        if (input == 0) {
//            for (clsCat cat : listaGatos) {
//                if (cat.getCode().equals(codeSearch)) {
//                    this.listaGatos.remove(cat);
//                    limpiarCamposCat();
//                    llenarListaMascotas();
//                    JOptionPane.showMessageDialog(this, "Gato eliminado con exito");
//                    found = true;
//                    break;
//                }
//            }
//
//            if (!found) {
//                JOptionPane.showMessageDialog(this, "Gato no encontrado");
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Eliminacion Cancelada");
//        }

    }//GEN-LAST:event_btnEliminarCatActionPerformed

    private void txtPetIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPetIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPetIdActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        //1. Creación de archivo o libro de excel
        HSSFWorkbook book = new HSSFWorkbook();
        //2. Creación de hoja del archivo excel y asociación al documento o libro.
        HSSFSheet sheet = book.createSheet();
        //3. definir nombre de la hoja en cuestión
        book.setSheetName(0, "Mascotas");
        
        String[] headers = new String[]{
            "Code",
            "Name",
            "Color",
            "Health Status"
        };
        
        CellStyle headerCellStyle = book.createCellStyle();
        HSSFFont font = book.createFont();
        font.setBold(true);
        headerCellStyle.setFont(font);
        
        HSSFRow headersRow = sheet.createRow(0);
        for (int i = 0; i < headers.length; i++) {
            String header = headers[i];
            HSSFCell cell = headersRow.createCell(i);
            cell.setCellStyle(headerCellStyle);
            cell.setCellValue(header);
        }
        
        for (int j = 0; j < listaGatos.size(); j++) {
            HSSFRow row = sheet.createRow(j + 1);
            String code = listaGatos.get(j).getCode();
            String name = listaGatos.get(j).getName();
            String color = listaGatos.get(j).getColor();
            String healthStatus = listaGatos.get(j).getHealthStatus();
            
            row.createCell(0).setCellValue(code);
            row.createCell(1).setCellValue(name);
            row.createCell(2).setCellValue(color);
            row.createCell(3).setCellValue(healthStatus);
        }
        
        try {
            FileOutputStream file = new FileOutputStream((new Date() + "Reporte-Admin-Mascotas.xls").replace(":", "-"));
            book.write(file);
            file.close();
            JOptionPane.showMessageDialog(this, "Archivo exportado");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
            Logger.getLogger(frmPet.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarCat;
    private javax.swing.JButton btnCrearCat;
    private javax.swing.JButton btnEditarCat;
    private javax.swing.JButton btnEliminarCat;
    private javax.swing.JButton btnExportar;
    private javax.swing.JComboBox<String> cbxBreedCat;
    private javax.swing.JComboBox<String> cbxHealthStatusCat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCatId;
    private javax.swing.JLabel lblPetId;
    private javax.swing.JList<String> listMascotas;
    private javax.swing.JPanel panelReporteEstadoSalud;
    private javax.swing.JTextField txtBornYearCat;
    private javax.swing.JTextField txtCatId;
    private javax.swing.JTextField txtCodeCat;
    private javax.swing.JTextField txtColorCat;
    private javax.swing.JTextField txtNameCat;
    private javax.swing.JTextField txtPetId;
    // End of variables declaration//GEN-END:variables
}
